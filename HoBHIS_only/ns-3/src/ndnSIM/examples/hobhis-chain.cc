/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Natalya Rozhnova <natalya.rozhnova@lip6.fr>
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ndnSIM-module.h"
#include "ns3/ndn-hobhis-net-device-face.h"

#include "ns3/point-to-point-net-device.h"
#include "ns3/point-to-point-module.h"

#include "ns3/ndn-drop-tail-queue.h"

using namespace ns3;
using namespace ndn;

std::stringstream filePlotQueue;
std::stringstream filePlotInterestQueue;

void
CheckQueueSize (Ptr<Queue> queue, Ptr<NetDeviceFace> ndf)
{
	uint32_t DqtotalSize;
	uint32_t queuec1 = 0;
	if(ndf->HobhisEnabled()==true)
	{
		Ptr<NDNDropTailQueue> ndnqueue = StaticCast<NDNDropTailQueue> (queue);
		if(ndnqueue != NULL)
		{
			queuec1 = ndnqueue->GetQueueSizePerFlow("/c1");
			DqtotalSize = ndnqueue->GetDataQueueLength();
		}
	}
	else DqtotalSize = queue->GetNPackets();

 // check queue size every 1/100 of a second
  Simulator::Schedule (Seconds (0.01), &CheckQueueSize, queue, ndf);

  std::ofstream fPlotQueue (filePlotQueue.str ().c_str (), std::ios::out|std::ios::app);
  fPlotQueue << Simulator::Now ().GetSeconds ()
		     << " @ "<< queue
		     <<" /c1 "<<queuec1
		     <<" -total " <<DqtotalSize
		     << std::endl;
  fPlotQueue.close ();
}

void
CheckInterestQueueSize (Ptr<NetDeviceFace> ndf)
{
	Ptr<HobhisNetDeviceFace> hndf = StaticCast<HobhisNetDeviceFace> (ndf);

	uint32_t IqSize = hndf->GetQueueLength();

	// check queue size every 1/100 of a second
	Simulator::Schedule (Seconds (0.01), &CheckInterestQueueSize, ndf);

	std::ofstream fPlotQueue (filePlotInterestQueue.str ().c_str (), std::ios::out|std::ios::app);
	fPlotQueue << Simulator::Now ().GetSeconds ()
			   << " @ "<< hndf
			   << " -ql " <<IqSize
			   << std::endl;
	fPlotQueue.close ();
}

int
main (int argc, char *argv[])
{
  bool writeForPlot = false;
  std::string RSmin("0"), RSmax("0");

  CommandLine cmd;
  cmd.AddValue ("wfp", "<0/1> to write results for plot (gnuplot)", writeForPlot); // if you want to obtain the tracing files
  cmd.AddValue("RSmin", "minimum delay generated by server for each data packet, [seconds]", RSmin);
  cmd.AddValue("RSmax", "maximum delay generated by server for each data packet, [seconds]", RSmax);
  cmd.Parse (argc, argv);

  // Read topology
  AnnotatedTopologyReader topologyReader ("", 25);
  topologyReader.SetFileName ("src/ndnSIM/examples/topologies/hobhis-baseline.txt");
  topologyReader.Read ();

  // Getting containers for the consumer/producer
  Ptr<Node> c1 = Names::Find<Node> ("C1");
  Ptr<Node> r1 = Names::Find<Node> ("R1");
  Ptr<Node> s1 = Names::Find<Node> ("P1");

  // Install CCNx stack on all nodes
  ndn::StackHelper ndnHelper;
	  ndnHelper.SetForwardingStrategy ("ns3::ndn::fw::BestRoute");

  /* enable shaper
   * client/server (is the node a client or server? This parameter should be enabled on router nodes only)
   * INTEREST buffer size
   * target
   * convergence speed (design parameter)
   * dynamic adjustment of design parameter (only for monoflow))
   */
  ndnHelper.EnableHobhis (true, false, 10000, 60, 0.7);
  ndnHelper.SetContentStore ("ns3::ndn::cs::Lru", "MaxSize", "1"); // almost no caching
  ndnHelper.Install (r1);

//**************************** Installing NDN-drop-tail-queue to manage the data queue on each router. ******************************************

  // Router 1 interface 0
  ObjectFactory factory;
  Ptr<L3Protocol> ndn = r1->GetObject<L3Protocol> ();
  Ptr<Face> face = ndn->GetFace (0);
  Ptr<NetDeviceFace> ndf = DynamicCast<NetDeviceFace>(face);
  Ptr<NetDevice> nd = ndf->GetNetDevice();
  Ptr<PointToPointNetDevice> p2pnd = StaticCast<PointToPointNetDevice> (nd);

  factory.SetTypeId("ns3::NDNDropTailQueue");
  Config::SetDefault ("ns3::NDNDropTailQueue::MaxPackets", UintegerValue (100));
  Ptr<Queue> queueA = factory.Create<Queue> ();
  Ptr<NDNDropTailQueue> ndnqueue = StaticCast<NDNDropTailQueue> (queueA);
  ndnqueue->SetMode(ndn::NDNDropTailQueue::QUEUE_MODE_PACKETS);
  p2pnd->SetQueue (queueA);

  //***********************************************************************************************************************************************************

  ndn::StackHelper ndnHelper1;
  ndnHelper1.SetForwardingStrategy ("ns3::ndn::fw::BestRoute");
  ndnHelper1.EnableHobhis (true, true);
  ndnHelper1.SetContentStore ("ns3::ndn::cs::Lru", "MaxSize", "1"); // almost no caching
  ndnHelper1.Install (c1);
  ndnHelper1.Install (s1);

  // Installing global routing interface on all nodes
   ndn::GlobalRoutingHelper ndnGlobalRoutingHelper;
   ndnGlobalRoutingHelper.InstallAll ();

  // Install consumers
  ndn::AppHelper consumerHelper ("ns3::ndn::ConsumerCbr");
  consumerHelper.SetAttribute("Frequency", StringValue ("10000.0"));
  consumerHelper.SetPrefix ("/c1");
  consumerHelper.Install (c1);

  // Register prefix with global routing controller and install producer

  ndnGlobalRoutingHelper.AddOrigins ("/c1", s1);

  // Install servers
  ndn::AppHelper producerHelper ("ns3::ndn::Producer");
  producerHelper.SetAttribute ("PayloadSize", StringValue("1000"));
  producerHelper.SetAttribute ("RandomDelayMin", StringValue(RSmin));
  producerHelper.SetAttribute ("RandomDelayMax", StringValue(RSmax));
  producerHelper.SetPrefix ("/c1");
  producerHelper.Install (s1);

  // Calculate and install FIBs
  ndnGlobalRoutingHelper.CalculateRoutes ();

  Simulator::Stop (Seconds (50.0));

  // Queue trace

  std::string pathOut = ".";
  if (writeForPlot)
  	  {
	  	  filePlotQueue << pathOut << "/" << "data-queue-r1-c1.plotme";
	  	  remove (filePlotQueue.str ().c_str ());
	  	  Ptr<L3Protocol> ndn = r1->GetObject<L3Protocol> ();

	  	  Ptr<Face> face = ndn->GetFace (0);
	  	  Ptr<NetDeviceFace> ndf = DynamicCast<NetDeviceFace>(face);
	  	  Ptr<NetDevice> nd = ndf->GetNetDevice();
	  	  Ptr<PointToPointNetDevice> p2pnd = StaticCast<PointToPointNetDevice> (nd);
	  	  Ptr<Queue> queue = p2pnd->GetQueue();
	  	  Simulator::ScheduleNow (&CheckQueueSize, queue, ndf);

	  	  // Check Interest queue size
	  	  Ptr<Face> face1 = ndn->GetFace (1);
	  	  Ptr<NetDeviceFace> ndf1 = DynamicCast<NetDeviceFace>(face1);
	  	  filePlotInterestQueue << pathOut << "/" << "interest-queue-r1-s1.plotme";
	  	  remove (filePlotInterestQueue.str ().c_str ());
	  	  Simulator::ScheduleNow (&CheckInterestQueueSize, ndf1);
  	  }
  Simulator::Run ();
  Simulator::Destroy ();

  return 0;
}
